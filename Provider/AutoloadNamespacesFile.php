<?php

/*
 * This file is part of the GnugatWizardBundle project.
 *
 * (c) Loïc Chardonnet <loic.chardonnet@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Gnugat\Bundle\WizardBundle\Provider;

use Gnugat\Bundle\WizardBundle\Model\ComposerPackage;

use Symfony\Component\HttpKernel\KernelInterface;

/**
 * Uses the autoload_namespaces.php file generated by Composer.
 *
 * @author Loïc Chardonnet <loic.chardonnet@gmail.com>
 */
class AutoloadNamespacesFile implements ComposerPackageProvider
{
    /**
     * @var string
     */
    private $autoloadNamespacesPath;

    /**
     * @var string
     */
    private $autoloadPsr4Path;

    /**
     * @param KernelInterface $kernel
     */
    public function __construct(KernelInterface $kernel)
    {
        $this->autoloadNamespacesPath = $kernel->getRootDir().'/../vendor/composer/autoload_namespaces.php';
        $this->autoloadPsr4Path = $kernel->getRootDir().'/../vendor/composer/autoload_psr4.php';
    }

    /**
     * {@inheritdoc}
     */
    public function getPackage($name)
    {
        $packages = array();

        $autoloadNamespaces = array();
        if (file_exists($this->autoloadNamespacesPath)) {
            $psr1 = include($this->autoloadNamespacesPath);
            $autoloadNamespaces = array_merge($autoloadNamespaces, $psr1);
        }
        if (file_exists($this->autoloadPsr4Path)) {
            $psr4 = include($this->autoloadPsr4Path);
            $autoloadNamespaces = array_merge($autoloadNamespaces, $psr4);
        }

        foreach ($autoloadNamespaces as $namespace => $paths) {
            if (false !== strpos($paths[0], $name)) {
                $package = new ComposerPackage();
                $package->namespace = trim($namespace, '\\');
                $package->name = $name;

                return $package;
            }
        }

        throw new \Exception(sprintf('Package "%s" not installed', $name));
    }
}
