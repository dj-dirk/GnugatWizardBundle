<?php

/*
 * This file is part of the GnugatWizardBundle project.
 *
 * (c) Loïc Chardonnet <loic.chardonnet@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Gnugat\Bundle\WizardBundle\Provider;

use Gnugat\Bundle\WizardBundle\Model\ComposerPackage;

use Symfony\Component\HttpKernel\KernelInterface;

/**
 * Uses the autoload_namespaces.php file generated by Composer.
 *
 * @author Loïc Chardonnet <loic.chardonnet@gmail.com>
 */
class AutoloadNamespacesFile implements ComposerPackageProvider
{
    /**
     * @var string
     */
    private $autoloadNamespacesPath;

    /**
     * @param KernelInterface $kernel
     */
    public function __construct(KernelInterface $kernel)
    {
        $this->autoloadNamespacesPath = $kernel->getRootDir().'/../vendor/composer/autoload_namespaces.php';
    }

    /**
     * @return array
     */
    public function getPackages()
    {
        $packages = array();

        $autoloadNamespaces = include($this->autoloadNamespacesPath);
        foreach ($autoloadNamespaces as $namespace => $paths) {
            $package = new ComposerPackage();
            $package->namespace = trim($namespace, '\\');
            $package->name = $this->getNameFromPaths($paths);

            $packages[$package->name] = $package;
        }

        return $packages;
    }

    /**
     * @param array $paths
     *
     * @return string
     */
    public function getNameFromPaths(array $paths)
    {
        $path = array_pop($paths);

        $explodedPath = explode('/', $path);
        $libraryName = array_pop($explodedPath);
        $authorName = array_pop($explodedPath);

        $name = $authorName.'/'.$libraryName;

        return $name;
    }
}
